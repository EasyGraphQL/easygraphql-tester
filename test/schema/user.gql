union SearchResult = User | FamilyInfo

enum FamilyRelation {
  Father
  Mother
  Brother
}

type User {
  id: ID!
  email: String!
  username: String!
  fullName: String!
}

type Me {
  id: ID!
  email: String!
  username: String!
  fullName: String!
  addresses: [String]!
  scores: [Int]!
  age: Int
  testResult: Float!
  phone: [String]!
  apiKey: String!
  familyInfo: [FamilyInfo]!
  familyRelation: FamilyRelation!
  user: User!
}

input UserInput {
  email: String!
  username: String!
  fullName: String!
  password: String!
}

input IsAdminInput {
  isAdmin: Boolean!
}

input UpdatePasswordInput {
  oldPassword: String!
  newPassword: String!
}

input UpdateUserAgeInput {
  id: ID!
  age: Int!
}

input UpdateUserScoresInput {
  scores: [Int]!
}

type Query {
  getMe: Me
  getUserByUsername(username: String!, name: String!): User
  getMeByAge(age: Int!): Me
  getMeByTestResult(result: Float!): Me
  getMeByResults(results: [Int]!): Me
  getUsers: [User]!
  search(id: ID!): [SearchResult]!
}

type Mutation {
  createUser(input: UserInput!): User
  createUsers(input: [UserInput]!): [User]!
  isAdmin(input: IsAdminInput!): User
  updatePassword(input: UpdatePasswordInput!): Me
  updateUserAge(input: UpdateUserAgeInput!): Me
  updateUserScores(input: UpdateUserScoresInput!): Me
}
