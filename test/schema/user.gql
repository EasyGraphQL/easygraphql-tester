scalar DateTime

union SearchResult = User | FamilyInfo

enum FamilyRelation {
  Father
  Mother
  Brother
}

type User {
  id: ID! @deprecated(reason: "Use `newField`.")
  email: String!
  username: String!
  fullName: String!
}

type Me {
  id: ID!
  email: String!
  username: String!
  fullName: String!
  addresses: [String]!
  scores: [Int]!
  age: Int
  testResult: Float!
  phone: [String]!
  apiKey: String!
  familyInfo: [FamilyInfo]!
  familyRelation: FamilyRelation!
  user: User!
  createdAt: DateTime!
  isAdmin: Boolean!
}

type user_mutation_response {
  affected_rows: Int!
  returning: [User!]!
}

type Item {
  id: String!
  image: String!
  title: String!
}

input UserInput {
  email: String!
  username: String!
  fullName: String!
  password: String!
  dob: DateTime!
}

input IsAdminInput {
  isAdmin: Boolean!
}

input UpdatePasswordInput {
  oldPassword: String!
  newPassword: String!
}

input UpdateUserAgeInput {
  id: ID!
  age: Int!
}

input UpdateUserScoresInput {
  scores: [Int]!
}

input user_insert_input {
  id: Int
  username: String
}

input ItemWhereInput {
  AND: [ItemWhereInput!]
  OR: [ItemWhereInput!]
}

type Query {
  getMe: Me
  getUserByUsername(username: String!, name: String!): User
  getMeByAge(age: Int!): Me
  getMeByTestResult(result: Float!): Me
  getMeByResults(results: [Int]!): Me
  getUsers: [User]!
  search(id: ID!): [SearchResult]!
  getString: String!
  getInt: Int!
  getMultiplesInt: [Int]!
  getMultiplesStrings: [String!]!
  items(where: ItemWhereInput): [Item]!
}

type Mutation {
  createUser(input: UserInput!): User
  createUsers(input: [UserInput]!): [User]!
  isAdmin(input: IsAdminInput!): User
  updatePassword(input: UpdatePasswordInput!): Me
  updateUserAge(input: UpdateUserAgeInput!): Me
  updateUserScores(scores: UpdateUserScoresInput!): Me
  createBoolean(input: IsAdminInput!): Boolean!
  createTest(name: String!, age: Int!): Boolean!
  createNames(names: [String!]!): String!
  createTodo(completed: Boolean!): Boolean!
  insert_user(objects: [user_insert_input!]!): user_mutation_response
  createNewUser(input: [UserInput!]!, isAdmin: IsAdminInput): User
  resetPassword(resetToken: String!, password: String!, confirmPassword: String!): User!
}

type Subscription {
  newUsers(limit: Int!): [User!]!
  newUser: User!
  createdUser(where: IsAdminInput!): User!
}